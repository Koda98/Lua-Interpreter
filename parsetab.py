
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocORnonassocANDnonassocLTGTLTEGTEEQUALSNEleftPLUSMINUSleftTIMESDIVIDEINTEGER_DIVIDErightUMINUSNOTAND BREAK DIVIDE DO END EQUALS FALSE GT GTE IDENTIFIER IF INTEGER_DIVIDE LT LTE MINUS NE NIL NOT NUMBER OR PLUS RETURN THEN TIMES TRUE WHILEchunk : blockblock : stat_liststat_list : stat stat_list\n                 | emptystat : ';'stat : BREAKstat : DO block ENDstat : WHILE exp DO block ENDstat : IF exp THEN block ENDstat : varlist '=' expliststat : RETURN\n            | RETURN explist\n            | RETURN ';'\n            | RETURN explist ';'varlist : var\n               | var ',' varlistvar : IDENTIFIERexplist : exp\n               | exp ',' explistexp : exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp INTEGER_DIVIDE exp\n           | exp LT exp\n           | exp GT exp\n           | exp LTE exp\n           | exp GTE exp\n           | exp EQUALS exp\n           | exp NE exp\n           | exp AND exp\n           | exp OR expexp : '(' exp ')'exp : varexp : NUMBERexp : MINUS exp %prec UMINUS\n           | NOT expexp : FALSE\n           | TRUEexp : NILempty :"
    
_lr_action_items = {';':([0,4,6,7,8,12,14,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[6,6,-5,-6,6,29,-17,-34,-35,-38,-39,-40,52,-13,-18,-7,6,-36,-37,6,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'BREAK':([0,4,6,7,8,12,14,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[7,7,-5,-6,7,-11,-17,-34,-35,-38,-39,-40,-12,-13,-18,-7,7,-36,-37,7,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'DO':([0,4,6,7,8,12,14,17,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[8,8,-5,-6,8,-11,-17,33,-34,-35,-38,-39,-40,-12,-13,-18,-7,8,-36,-37,8,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'WHILE':([0,4,6,7,8,12,14,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[9,9,-5,-6,9,-11,-17,-34,-35,-38,-39,-40,-12,-13,-18,-7,9,-36,-37,9,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'IF':([0,4,6,7,8,12,14,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[10,10,-5,-6,10,-11,-17,-34,-35,-38,-39,-40,-12,-13,-18,-7,10,-36,-37,10,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'RETURN':([0,4,6,7,8,12,14,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[12,12,-5,-6,12,-11,-17,-34,-35,-38,-39,-40,-12,-13,-18,-7,12,-36,-37,12,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'$end':([0,1,2,3,4,5,6,7,12,14,15,20,21,23,24,25,28,29,30,32,47,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[-41,0,-1,-2,-41,-4,-5,-6,-11,-17,-3,-34,-35,-38,-39,-40,-12,-13,-18,-7,-36,-37,-10,-14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'IDENTIFIER':([0,4,6,7,8,9,10,12,14,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,],[14,14,-5,-6,14,14,14,14,-17,14,14,-34,-35,14,-38,-39,-40,14,-12,-13,-18,14,-7,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-36,-37,14,-10,-14,14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-8,-9,]),'END':([3,4,5,6,7,8,12,14,15,16,20,21,23,24,25,28,29,30,32,33,47,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-2,-41,-4,-5,-6,-41,-11,-17,-3,32,-34,-35,-38,-39,-40,-12,-13,-18,-7,-41,-36,-37,-41,-10,-14,72,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,73,-19,-8,-9,]),'(':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINUS':([9,10,12,14,17,18,19,20,21,22,23,24,25,26,27,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[18,18,18,-17,35,18,18,-34,-35,18,-38,-39,-40,35,18,35,18,18,18,18,18,18,18,18,18,18,18,18,18,-36,35,-37,18,-20,-21,-22,-23,-24,35,35,35,35,35,35,35,35,-33,]),'NOT':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'FALSE':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'TRUE':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NIL':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'=':([11,13,14,54,],[27,-15,-17,-16,]),',':([13,14,20,21,23,24,25,30,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[31,-17,-34,-35,-38,-39,-40,53,-36,-37,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,]),'PLUS':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,34,-34,-35,-38,-39,-40,34,34,-36,34,-37,-20,-21,-22,-23,-24,34,34,34,34,34,34,34,34,-33,]),'TIMES':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,36,-34,-35,-38,-39,-40,36,36,-36,36,-37,36,36,-22,-23,-24,36,36,36,36,36,36,36,36,-33,]),'DIVIDE':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,37,-34,-35,-38,-39,-40,37,37,-36,37,-37,37,37,-22,-23,-24,37,37,37,37,37,37,37,37,-33,]),'INTEGER_DIVIDE':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,38,-34,-35,-38,-39,-40,38,38,-36,38,-37,38,38,-22,-23,-24,38,38,38,38,38,38,38,38,-33,]),'LT':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,39,-34,-35,-38,-39,-40,39,39,-36,39,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,39,39,-33,]),'GT':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,40,-34,-35,-38,-39,-40,40,40,-36,40,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,40,40,-33,]),'LTE':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,41,-34,-35,-38,-39,-40,41,41,-36,41,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,41,41,-33,]),'GTE':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,42,-34,-35,-38,-39,-40,42,42,-36,42,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,42,42,-33,]),'EQUALS':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,43,-34,-35,-38,-39,-40,43,43,-36,43,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,43,43,-33,]),'NE':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,44,-34,-35,-38,-39,-40,44,44,-36,44,-37,-20,-21,-22,-23,-24,None,None,None,None,None,None,44,44,-33,]),'AND':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,45,-34,-35,-38,-39,-40,45,45,-36,45,-37,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,None,45,-33,]),'OR':([14,17,20,21,23,24,25,26,30,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,46,-34,-35,-38,-39,-40,46,46,-36,46,-37,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,None,-33,]),'THEN':([14,20,21,23,24,25,26,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,-34,-35,-38,-39,-40,50,-36,-37,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,]),')':([14,20,21,23,24,25,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-17,-34,-35,-38,-39,-40,-36,69,-37,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'chunk':([0,],[1,]),'block':([0,8,33,50,],[2,16,55,70,]),'stat_list':([0,4,8,33,50,],[3,15,3,3,3,]),'stat':([0,4,8,33,50,],[4,4,4,4,4,]),'empty':([0,4,8,33,50,],[5,5,5,5,5,]),'varlist':([0,4,8,31,33,50,],[11,11,11,54,11,11,]),'var':([0,4,8,9,10,12,18,19,22,27,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50,53,],[13,13,13,20,20,20,20,20,20,20,13,13,20,20,20,20,20,20,20,20,20,20,20,20,20,13,20,]),'exp':([9,10,12,18,19,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,53,],[17,26,30,47,48,49,30,56,57,58,59,60,61,62,63,64,65,66,67,68,30,]),'explist':([12,27,53,],[28,51,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> chunk","S'",1,None,None,None),
  ('chunk -> block','chunk',1,'p_chunk','parser.py',20),
  ('block -> stat_list','block',1,'p_block','parser.py',25),
  ('stat_list -> stat stat_list','stat_list',2,'p_stat_list','parser.py',30),
  ('stat_list -> empty','stat_list',1,'p_stat_list','parser.py',31),
  ('stat -> ;','stat',1,'p_stat_semi','parser.py',39),
  ('stat -> BREAK','stat',1,'p_stat_break','parser.py',44),
  ('stat -> DO block END','stat',3,'p_stat_do','parser.py',49),
  ('stat -> WHILE exp DO block END','stat',5,'p_stat_while','parser.py',54),
  ('stat -> IF exp THEN block END','stat',5,'p_stat_if','parser.py',59),
  ('stat -> varlist = explist','stat',3,'p_stat_assign','parser.py',64),
  ('stat -> RETURN','stat',1,'p_stat_return','parser.py',69),
  ('stat -> RETURN explist','stat',2,'p_stat_return','parser.py',70),
  ('stat -> RETURN ;','stat',2,'p_stat_return','parser.py',71),
  ('stat -> RETURN explist ;','stat',3,'p_stat_return','parser.py',72),
  ('varlist -> var','varlist',1,'p_varlist','parser.py',82),
  ('varlist -> var , varlist','varlist',3,'p_varlist','parser.py',83),
  ('var -> IDENTIFIER','var',1,'p_var','parser.py',91),
  ('explist -> exp','explist',1,'p_explist','parser.py',96),
  ('explist -> exp , explist','explist',3,'p_explist','parser.py',97),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',105),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',106),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','parser.py',107),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',108),
  ('exp -> exp INTEGER_DIVIDE exp','exp',3,'p_exp_binop','parser.py',109),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',110),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',111),
  ('exp -> exp LTE exp','exp',3,'p_exp_binop','parser.py',112),
  ('exp -> exp GTE exp','exp',3,'p_exp_binop','parser.py',113),
  ('exp -> exp EQUALS exp','exp',3,'p_exp_binop','parser.py',114),
  ('exp -> exp NE exp','exp',3,'p_exp_binop','parser.py',115),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',116),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',117),
  ('exp -> ( exp )','exp',3,'p_exp_group','parser.py',122),
  ('exp -> var','exp',1,'p_exp_var','parser.py',127),
  ('exp -> NUMBER','exp',1,'p_exp_numeral','parser.py',132),
  ('exp -> MINUS exp','exp',2,'p_exp_unop','parser.py',137),
  ('exp -> NOT exp','exp',2,'p_exp_unop','parser.py',138),
  ('exp -> FALSE','exp',1,'p_exp_bool','parser.py',143),
  ('exp -> TRUE','exp',1,'p_exp_bool','parser.py',144),
  ('exp -> NIL','exp',1,'p_exp_nil','parser.py',149),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',154),
]
