
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocORnonassocANDnonassocLTGTLTEGTEEQUALSNEleftPLUSMINUSleftTIMESDIVIDEINTEGER_DIVIDErightUMINUSNOTAND BREAK DIVIDE DO END EQUALS FALSE GT GTE IDENTIFIER INTEGER_DIVIDE LT LTE MINUS NE NIL NOT NUMBER OR PLUS RETURN TIMES TRUE WHILEchunk : blockblock : stat_liststat_list : stat stat_list\n                 | emptystat : ';'stat : BREAKstat : DO block ENDstat : WHILE exp DO block ENDstat : varlist '=' expliststat : RETURN\n            | RETURN explist\n            | RETURN ';'\n            | RETURN explist ';'varlist : var\n               | var ',' varlistvar : IDENTIFIERexplist : exp\n               | exp ',' explistexp : exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp INTEGER_DIVIDE exp\n           | exp LT exp\n           | exp GT exp\n           | exp LTE exp\n           | exp GTE exp\n           | exp EQUALS exp\n           | exp NE exp\n           | exp AND exp\n           | exp OR expexp : '(' exp ')'exp : varexp : NUMBERexp : MINUS exp %prec UMINUS\n           | NOT expexp : FALSE\n           | TRUEexp : NILempty :"
    
_lr_action_items = {';':([0,4,6,7,8,11,13,19,20,22,23,24,26,27,28,30,31,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[6,6,-5,-6,6,27,-16,-33,-34,-37,-38,-39,49,-12,-17,-7,6,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'BREAK':([0,4,6,7,8,11,13,19,20,22,23,24,26,27,28,30,31,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[7,7,-5,-6,7,-10,-16,-33,-34,-37,-38,-39,-11,-12,-17,-7,7,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'DO':([0,4,6,7,8,11,13,16,19,20,22,23,24,26,27,28,30,31,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[8,8,-5,-6,8,-10,-16,31,-33,-34,-37,-38,-39,-11,-12,-17,-7,8,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'WHILE':([0,4,6,7,8,11,13,19,20,22,23,24,26,27,28,30,31,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[9,9,-5,-6,9,-10,-16,-33,-34,-37,-38,-39,-11,-12,-17,-7,9,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'RETURN':([0,4,6,7,8,11,13,19,20,22,23,24,26,27,28,30,31,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[11,11,-5,-6,11,-10,-16,-33,-34,-37,-38,-39,-11,-12,-17,-7,11,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'$end':([0,1,2,3,4,5,6,7,11,13,14,19,20,22,23,24,26,27,28,30,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[-40,0,-1,-2,-40,-4,-5,-6,-10,-16,-3,-33,-34,-37,-38,-39,-11,-12,-17,-7,-35,-36,-9,-13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'IDENTIFIER':([0,4,6,7,8,9,11,13,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[13,13,-5,-6,13,13,13,-16,13,13,-33,-34,13,-37,-38,-39,13,-11,-12,-17,13,-7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-35,-36,-9,-13,13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'END':([3,4,5,6,7,8,11,13,14,15,19,20,22,23,24,26,27,28,30,31,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[-2,-40,-4,-5,-6,-40,-10,-16,-3,30,-33,-34,-37,-38,-39,-11,-12,-17,-7,-40,-35,-36,-9,-13,68,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-8,]),'(':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'MINUS':([9,11,13,16,17,18,19,20,21,22,23,24,25,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[17,17,-16,33,17,17,-33,-34,17,-37,-38,-39,17,33,17,17,17,17,17,17,17,17,17,17,17,17,17,-35,33,-36,17,-19,-20,-21,-22,-23,33,33,33,33,33,33,33,33,-32,]),'NOT':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUE':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'NIL':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'=':([10,12,13,51,],[25,-14,-16,-15,]),',':([12,13,19,20,22,23,24,28,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[29,-16,-33,-34,-37,-38,-39,50,-35,-36,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'PLUS':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,32,-33,-34,-37,-38,-39,32,-35,32,-36,-19,-20,-21,-22,-23,32,32,32,32,32,32,32,32,-32,]),'TIMES':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,34,-33,-34,-37,-38,-39,34,-35,34,-36,34,34,-21,-22,-23,34,34,34,34,34,34,34,34,-32,]),'DIVIDE':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,35,-33,-34,-37,-38,-39,35,-35,35,-36,35,35,-21,-22,-23,35,35,35,35,35,35,35,35,-32,]),'INTEGER_DIVIDE':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,36,-33,-34,-37,-38,-39,36,-35,36,-36,36,36,-21,-22,-23,36,36,36,36,36,36,36,36,-32,]),'LT':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,37,-33,-34,-37,-38,-39,37,-35,37,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,37,37,-32,]),'GT':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,38,-33,-34,-37,-38,-39,38,-35,38,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,38,38,-32,]),'LTE':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,39,-33,-34,-37,-38,-39,39,-35,39,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,39,39,-32,]),'GTE':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,40,-33,-34,-37,-38,-39,40,-35,40,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,40,40,-32,]),'EQUALS':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,41,-33,-34,-37,-38,-39,41,-35,41,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,41,41,-32,]),'NE':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,42,-33,-34,-37,-38,-39,42,-35,42,-36,-19,-20,-21,-22,-23,None,None,None,None,None,None,42,42,-32,]),'AND':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,43,-33,-34,-37,-38,-39,43,-35,43,-36,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,None,43,-32,]),'OR':([13,16,19,20,22,23,24,28,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,44,-33,-34,-37,-38,-39,44,-35,44,-36,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,None,-32,]),')':([13,19,20,22,23,24,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-16,-33,-34,-37,-38,-39,-35,66,-36,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'chunk':([0,],[1,]),'block':([0,8,31,],[2,15,52,]),'stat_list':([0,4,8,31,],[3,14,3,3,]),'stat':([0,4,8,31,],[4,4,4,4,]),'empty':([0,4,8,31,],[5,5,5,5,]),'varlist':([0,4,8,29,31,],[10,10,10,51,10,]),'var':([0,4,8,9,11,17,18,21,25,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[12,12,12,19,19,19,19,19,19,12,12,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'exp':([9,11,17,18,21,25,32,33,34,35,36,37,38,39,40,41,42,43,44,50,],[16,28,45,46,47,28,53,54,55,56,57,58,59,60,61,62,63,64,65,28,]),'explist':([11,25,50,],[26,48,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> chunk","S'",1,None,None,None),
  ('chunk -> block','chunk',1,'p_chunk','parser.py',20),
  ('block -> stat_list','block',1,'p_block','parser.py',25),
  ('stat_list -> stat stat_list','stat_list',2,'p_stat_list','parser.py',30),
  ('stat_list -> empty','stat_list',1,'p_stat_list','parser.py',31),
  ('stat -> ;','stat',1,'p_stat_semi','parser.py',39),
  ('stat -> BREAK','stat',1,'p_stat_break','parser.py',44),
  ('stat -> DO block END','stat',3,'p_stat_do','parser.py',49),
  ('stat -> WHILE exp DO block END','stat',5,'p_stat_while','parser.py',54),
  ('stat -> varlist = explist','stat',3,'p_stat_assign','parser.py',59),
  ('stat -> RETURN','stat',1,'p_stat_return','parser.py',64),
  ('stat -> RETURN explist','stat',2,'p_stat_return','parser.py',65),
  ('stat -> RETURN ;','stat',2,'p_stat_return','parser.py',66),
  ('stat -> RETURN explist ;','stat',3,'p_stat_return','parser.py',67),
  ('varlist -> var','varlist',1,'p_varlist','parser.py',77),
  ('varlist -> var , varlist','varlist',3,'p_varlist','parser.py',78),
  ('var -> IDENTIFIER','var',1,'p_var','parser.py',86),
  ('explist -> exp','explist',1,'p_explist','parser.py',91),
  ('explist -> exp , explist','explist',3,'p_explist','parser.py',92),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',100),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',101),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','parser.py',102),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',103),
  ('exp -> exp INTEGER_DIVIDE exp','exp',3,'p_exp_binop','parser.py',104),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',105),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',106),
  ('exp -> exp LTE exp','exp',3,'p_exp_binop','parser.py',107),
  ('exp -> exp GTE exp','exp',3,'p_exp_binop','parser.py',108),
  ('exp -> exp EQUALS exp','exp',3,'p_exp_binop','parser.py',109),
  ('exp -> exp NE exp','exp',3,'p_exp_binop','parser.py',110),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',111),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',112),
  ('exp -> ( exp )','exp',3,'p_exp_group','parser.py',117),
  ('exp -> var','exp',1,'p_exp_var','parser.py',122),
  ('exp -> NUMBER','exp',1,'p_exp_numeral','parser.py',127),
  ('exp -> MINUS exp','exp',2,'p_exp_unop','parser.py',132),
  ('exp -> NOT exp','exp',2,'p_exp_unop','parser.py',133),
  ('exp -> FALSE','exp',1,'p_exp_bool','parser.py',138),
  ('exp -> TRUE','exp',1,'p_exp_bool','parser.py',139),
  ('exp -> NIL','exp',1,'p_exp_nil','parser.py',144),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',149),
]
