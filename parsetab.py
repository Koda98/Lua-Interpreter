
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocORnonassocANDnonassocLTGTLTEGTEEQUALSNEleftPLUSMINUSleftTIMESDIVIDEINTEGER_DIVIDErightUMINUSNOTAND DIVIDE DO END EQUALS FALSE GT GTE IDENTIFIER INTEGER_DIVIDE LT LTE MINUS NE NIL NOT NUMBER OR PLUS RETURN TIMES TRUEchunk : blockblock : stat_liststat_list : stat stat_list\n                 | emptystat : ';'stat : DO block ENDstat : varlist '=' expliststat : RETURN\n            | RETURN explist\n            | RETURN ';'\n            | RETURN explist ';'varlist : var\n               | var ',' varlistvar : IDENTIFIERexplist : exp\n               | exp ',' explistexp : exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp INTEGER_DIVIDE exp\n           | exp LT exp\n           | exp GT exp\n           | exp LTE exp\n           | exp GTE exp\n           | exp EQUALS exp\n           | exp NE exp\n           | exp AND exp\n           | exp OR expexp : '(' exp ')'exp : varexp : NUMBERexp : MINUS exp %prec UMINUS\n           | NOT expexp : FALSE\n           | TRUEexp : NILempty :"
    
_lr_action_items = {';':([0,4,6,7,9,11,15,16,17,20,21,23,24,25,27,28,29,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[6,6,-5,6,16,-14,29,-10,-15,-31,-32,-35,-36,-37,-6,-7,-11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'DO':([0,4,6,7,9,11,15,16,17,20,21,23,24,25,27,28,29,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[7,7,-5,7,-8,-14,-9,-10,-15,-31,-32,-35,-36,-37,-6,-7,-11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'RETURN':([0,4,6,7,9,11,15,16,17,20,21,23,24,25,27,28,29,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[9,9,-5,9,-8,-14,-9,-10,-15,-31,-32,-35,-36,-37,-6,-7,-11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'$end':([0,1,2,3,4,5,6,9,11,12,15,16,17,20,21,23,24,25,27,28,29,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-38,0,-1,-2,-38,-4,-5,-8,-14,-3,-9,-10,-15,-31,-32,-35,-36,-37,-6,-7,-11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'IDENTIFIER':([0,4,6,7,9,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[11,11,-5,11,11,-14,11,-9,-10,-15,11,11,-31,-32,11,-35,-36,-37,11,-6,-7,-11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'END':([3,4,5,6,7,9,11,12,13,15,16,17,20,21,23,24,25,27,28,29,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-2,-38,-4,-5,-38,-8,-14,-3,27,-9,-10,-15,-31,-32,-35,-36,-37,-6,-7,-11,-33,-34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'=':([8,10,11,47,],[14,-12,-14,-13,]),'(':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINUS':([9,11,14,17,18,19,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[18,-14,18,32,18,18,-31,-32,18,-35,-36,-37,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-33,32,-34,-17,-18,-19,-20,-21,32,32,32,32,32,32,32,32,-30,]),'NOT':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'FALSE':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'TRUE':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NIL':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),',':([10,11,17,20,21,23,24,25,44,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[26,-14,30,-31,-32,-35,-36,-37,-33,-34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),'PLUS':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,31,-31,-32,-35,-36,-37,-33,31,-34,-17,-18,-19,-20,-21,31,31,31,31,31,31,31,31,-30,]),'TIMES':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,33,-31,-32,-35,-36,-37,-33,33,-34,33,33,-19,-20,-21,33,33,33,33,33,33,33,33,-30,]),'DIVIDE':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,34,-31,-32,-35,-36,-37,-33,34,-34,34,34,-19,-20,-21,34,34,34,34,34,34,34,34,-30,]),'INTEGER_DIVIDE':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,35,-31,-32,-35,-36,-37,-33,35,-34,35,35,-19,-20,-21,35,35,35,35,35,35,35,35,-30,]),'LT':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,36,-31,-32,-35,-36,-37,-33,36,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,36,36,-30,]),'GT':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,37,-31,-32,-35,-36,-37,-33,37,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,37,37,-30,]),'LTE':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,38,-31,-32,-35,-36,-37,-33,38,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,38,38,-30,]),'GTE':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,39,-31,-32,-35,-36,-37,-33,39,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,39,39,-30,]),'EQUALS':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,40,-31,-32,-35,-36,-37,-33,40,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,40,40,-30,]),'NE':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,41,-31,-32,-35,-36,-37,-33,41,-34,-17,-18,-19,-20,-21,None,None,None,None,None,None,41,41,-30,]),'AND':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,42,-31,-32,-35,-36,-37,-33,42,-34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,None,42,-30,]),'OR':([11,17,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,43,-31,-32,-35,-36,-37,-33,43,-34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,None,-30,]),')':([11,20,21,23,24,25,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-14,-31,-32,-35,-36,-37,-33,62,-34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'chunk':([0,],[1,]),'block':([0,7,],[2,13,]),'stat_list':([0,4,7,],[3,12,3,]),'stat':([0,4,7,],[4,4,4,]),'empty':([0,4,7,],[5,5,5,]),'varlist':([0,4,7,26,],[8,8,8,47,]),'var':([0,4,7,9,14,18,19,22,26,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[10,10,10,20,20,20,20,20,10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'explist':([9,14,30,],[15,28,48,]),'exp':([9,14,18,19,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[17,17,44,45,46,17,49,50,51,52,53,54,55,56,57,58,59,60,61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> chunk","S'",1,None,None,None),
  ('chunk -> block','chunk',1,'p_chunk','parser.py',20),
  ('block -> stat_list','block',1,'p_block','parser.py',25),
  ('stat_list -> stat stat_list','stat_list',2,'p_stat_list','parser.py',30),
  ('stat_list -> empty','stat_list',1,'p_stat_list','parser.py',31),
  ('stat -> ;','stat',1,'p_stat_semi','parser.py',39),
  ('stat -> DO block END','stat',3,'p_stat_do','parser.py',44),
  ('stat -> varlist = explist','stat',3,'p_stat_assign','parser.py',49),
  ('stat -> RETURN','stat',1,'p_stat_return','parser.py',54),
  ('stat -> RETURN explist','stat',2,'p_stat_return','parser.py',55),
  ('stat -> RETURN ;','stat',2,'p_stat_return','parser.py',56),
  ('stat -> RETURN explist ;','stat',3,'p_stat_return','parser.py',57),
  ('varlist -> var','varlist',1,'p_varlist','parser.py',67),
  ('varlist -> var , varlist','varlist',3,'p_varlist','parser.py',68),
  ('var -> IDENTIFIER','var',1,'p_var','parser.py',76),
  ('explist -> exp','explist',1,'p_explist','parser.py',81),
  ('explist -> exp , explist','explist',3,'p_explist','parser.py',82),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','parser.py',90),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','parser.py',91),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','parser.py',92),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','parser.py',93),
  ('exp -> exp INTEGER_DIVIDE exp','exp',3,'p_exp_binop','parser.py',94),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','parser.py',95),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','parser.py',96),
  ('exp -> exp LTE exp','exp',3,'p_exp_binop','parser.py',97),
  ('exp -> exp GTE exp','exp',3,'p_exp_binop','parser.py',98),
  ('exp -> exp EQUALS exp','exp',3,'p_exp_binop','parser.py',99),
  ('exp -> exp NE exp','exp',3,'p_exp_binop','parser.py',100),
  ('exp -> exp AND exp','exp',3,'p_exp_binop','parser.py',101),
  ('exp -> exp OR exp','exp',3,'p_exp_binop','parser.py',102),
  ('exp -> ( exp )','exp',3,'p_exp_group','parser.py',107),
  ('exp -> var','exp',1,'p_exp_var','parser.py',112),
  ('exp -> NUMBER','exp',1,'p_exp_numeral','parser.py',117),
  ('exp -> MINUS exp','exp',2,'p_exp_unop','parser.py',122),
  ('exp -> NOT exp','exp',2,'p_exp_unop','parser.py',123),
  ('exp -> FALSE','exp',1,'p_exp_bool','parser.py',128),
  ('exp -> TRUE','exp',1,'p_exp_bool','parser.py',129),
  ('exp -> NIL','exp',1,'p_exp_nil','parser.py',134),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',139),
]
